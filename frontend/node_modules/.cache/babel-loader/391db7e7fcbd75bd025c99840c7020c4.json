{"ast":null,"code":"var _xwrap = require('./_xwrap');\n\nvar bind = require('../bind');\n\nvar isArrayLike = require('../isArrayLike');\n\nmodule.exports = function () {\n  function _arrayReduce(xf, acc, list) {\n    var idx = 0;\n    var len = list.length;\n\n    while (idx < len) {\n      acc = xf['@@transducer/step'](acc, list[idx]);\n\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n\n      idx += 1;\n    }\n\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _iterableReduce(xf, acc, iter) {\n    var step = iter.next();\n\n    while (!step.done) {\n      acc = xf['@@transducer/step'](acc, step.value);\n\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n\n      step = iter.next();\n    }\n\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _methodReduce(xf, acc, obj) {\n    return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n  }\n\n  var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\n  return function _reduce(fn, acc, list) {\n    if (typeof fn === 'function') {\n      fn = _xwrap(fn);\n    }\n\n    if (isArrayLike(list)) {\n      return _arrayReduce(fn, acc, list);\n    }\n\n    if (typeof list.reduce === 'function') {\n      return _methodReduce(fn, acc, list);\n    }\n\n    if (list[symIterator] != null) {\n      return _iterableReduce(fn, acc, list[symIterator]());\n    }\n\n    if (typeof list.next === 'function') {\n      return _iterableReduce(fn, acc, list);\n    }\n\n    throw new TypeError('reduce: list must be array or iterable');\n  };\n}();","map":{"version":3,"sources":["/Users/lesleycheung/Desktop/agile/frontend/node_modules/ramda/src/internal/_reduce.js"],"names":["_xwrap","require","bind","isArrayLike","module","exports","_arrayReduce","xf","acc","list","idx","len","length","_iterableReduce","iter","step","next","done","value","_methodReduce","obj","reduce","symIterator","Symbol","iterator","_reduce","fn","TypeError"],"mappings":"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","sourcesContent":["var _xwrap = require('./_xwrap');\nvar bind = require('../bind');\nvar isArrayLike = require('../isArrayLike');\n\n\nmodule.exports = (function() {\n  function _arrayReduce(xf, acc, list) {\n    var idx = 0;\n    var len = list.length;\n    while (idx < len) {\n      acc = xf['@@transducer/step'](acc, list[idx]);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      idx += 1;\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _iterableReduce(xf, acc, iter) {\n    var step = iter.next();\n    while (!step.done) {\n      acc = xf['@@transducer/step'](acc, step.value);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      step = iter.next();\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _methodReduce(xf, acc, obj) {\n    return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n  }\n\n  var symIterator = (typeof Symbol !== 'undefined') ? Symbol.iterator : '@@iterator';\n  return function _reduce(fn, acc, list) {\n    if (typeof fn === 'function') {\n      fn = _xwrap(fn);\n    }\n    if (isArrayLike(list)) {\n      return _arrayReduce(fn, acc, list);\n    }\n    if (typeof list.reduce === 'function') {\n      return _methodReduce(fn, acc, list);\n    }\n    if (list[symIterator] != null) {\n      return _iterableReduce(fn, acc, list[symIterator]());\n    }\n    if (typeof list.next === 'function') {\n      return _iterableReduce(fn, acc, list);\n    }\n    throw new TypeError('reduce: list must be array or iterable');\n  };\n}());\n"]},"metadata":{},"sourceType":"script"}