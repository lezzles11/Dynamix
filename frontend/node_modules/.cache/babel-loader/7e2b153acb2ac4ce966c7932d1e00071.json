{"ast":null,"code":"var _curry1 = require('./internal/_curry1');\n\nvar _isString = require('./internal/_isString');\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */\n\n\nmodule.exports = _curry1(function reverse(list) {\n  return _isString(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();\n});","map":{"version":3,"sources":["/Users/lesleycheung/Desktop/agile/frontend/node_modules/ramda/src/reverse.js"],"names":["_curry1","require","_isString","module","exports","reverse","list","split","join","Array","prototype","slice","call"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,sBAAD,CAAvB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBAE,MAAM,CAACC,OAAP,GAAiBJ,OAAO,CAAC,SAASK,OAAT,CAAiBC,IAAjB,EAAuB;AAC9C,SAAOJ,SAAS,CAACI,IAAD,CAAT,GAAkBA,IAAI,CAACC,KAAL,CAAW,EAAX,EAAeF,OAAf,GAAyBG,IAAzB,CAA8B,EAA9B,CAAlB,GACkBC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BN,IAA3B,EAAiC,CAAjC,EAAoCD,OAApC,EADzB;AAED,CAHuB,CAAxB","sourcesContent":["var _curry1 = require('./internal/_curry1');\nvar _isString = require('./internal/_isString');\n\n\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */\nmodule.exports = _curry1(function reverse(list) {\n  return _isString(list) ? list.split('').reverse().join('') :\n                           Array.prototype.slice.call(list, 0).reverse();\n});\n"]},"metadata":{},"sourceType":"script"}