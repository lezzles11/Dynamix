{"ast":null,"code":"import moment from 'moment';\nexport default function selectTransactions(transactions, {\n  searchText,\n  sortBy,\n  startDate,\n  endDate,\n  accounts\n}) {\n  return transactions.filter(transaction => {\n    const createdAtMoment = moment(transaction.createdAt);\n    const startDateMatch = startDate ? startDate.isSameOrBefore(createdAtMoment, \"day\") : true;\n    const endDateMatch = endDate ? endDate.isSameOrAfter(createdAtMoment, \"day\") : true;\n    const textMatch = transaction.description.toLowerCase().includes(searchText.toLowerCase());\n    const accountsMatch = accounts.includes(transaction.account);\n    return startDateMatch && endDateMatch && textMatch && accountsMatch;\n  }).sort((a, b) => {\n    if (sortBy === \"date\") {\n      return a.createdAt < b.createdAt ? 1 : -1;\n    } else if (sortBy === \"amount\") {\n      return a.amount < b.amount ? 1 : -1;\n    }\n\n    return 0;\n  });\n}\n;","map":{"version":3,"sources":["/Users/lesleycheung/Desktop/agile/agileproject/frontend/src/pages/TrainingPage/selectors/transactions.js"],"names":["moment","selectTransactions","transactions","searchText","sortBy","startDate","endDate","accounts","filter","transaction","createdAtMoment","createdAt","startDateMatch","isSameOrBefore","endDateMatch","isSameOrAfter","textMatch","description","toLowerCase","includes","accountsMatch","account","sort","a","b","amount"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,eAAe,SAASC,kBAAT,CAA4BC,YAA5B,EAA0C;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,MAAd;AAAsBC,EAAAA,SAAtB;AAAiCC,EAAAA,OAAjC;AAA0CC,EAAAA;AAA1C,CAA1C,EAAgG;AAC7G,SAAOL,YAAY,CAACM,MAAb,CAAqBC,WAAD,IAAiB;AAC1C,UAAMC,eAAe,GAAGV,MAAM,CAACS,WAAW,CAACE,SAAb,CAA9B;AACA,UAAMC,cAAc,GAAGP,SAAS,GAAGA,SAAS,CAACQ,cAAV,CAAyBH,eAAzB,EAA0C,KAA1C,CAAH,GAAsD,IAAtF;AACA,UAAMI,YAAY,GAAGR,OAAO,GAAGA,OAAO,CAACS,aAAR,CAAsBL,eAAtB,EAAuC,KAAvC,CAAH,GAAmD,IAA/E;AACA,UAAMM,SAAS,GAAGP,WAAW,CAACQ,WAAZ,CAAwBC,WAAxB,GAAsCC,QAAtC,CAA+ChB,UAAU,CAACe,WAAX,EAA/C,CAAlB;AACA,UAAME,aAAa,GAAGb,QAAQ,CAACY,QAAT,CAAkBV,WAAW,CAACY,OAA9B,CAAtB;AACA,WAAOT,cAAc,IAAIE,YAAlB,IAAkCE,SAAlC,IAA+CI,aAAtD;AACD,GAPM,EAOJE,IAPI,CAOC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChB,QAAIpB,MAAM,KAAK,MAAf,EAAuB;AACrB,aAAOmB,CAAC,CAACZ,SAAF,GAAca,CAAC,CAACb,SAAhB,GAA4B,CAA5B,GAAgC,CAAC,CAAxC;AACD,KAFD,MAEO,IAAIP,MAAM,KAAK,QAAf,EAAyB;AAC9B,aAAOmB,CAAC,CAACE,MAAF,GAAWD,CAAC,CAACC,MAAb,GAAsB,CAAtB,GAA0B,CAAC,CAAlC;AACD;;AACD,WAAO,CAAP;AACD,GAdM,CAAP;AAeD;AAAA","sourcesContent":["import moment from 'moment';\n\nexport default function selectTransactions(transactions, { searchText, sortBy, startDate, endDate, accounts }) {\n  return transactions.filter((transaction) => {\n    const createdAtMoment = moment(transaction.createdAt);\n    const startDateMatch = startDate ? startDate.isSameOrBefore(createdAtMoment, \"day\") : true;\n    const endDateMatch = endDate ? endDate.isSameOrAfter(createdAtMoment, \"day\") : true;\n    const textMatch = transaction.description.toLowerCase().includes(searchText.toLowerCase());\n    const accountsMatch = accounts.includes(transaction.account);\n    return startDateMatch && endDateMatch && textMatch && accountsMatch;\n  }).sort((a, b) => {\n    if (sortBy === \"date\") {\n      return a.createdAt < b.createdAt ? 1 : -1;\n    } else if (sortBy === \"amount\") {\n      return a.amount < b.amount ? 1 : -1;\n    }\n    return 0;\n  });\n};"]},"metadata":{},"sourceType":"module"}